// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Voucher_System.Models;

namespace Voucher_System.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220706162438_change")]
    partial class change
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Voucher_System.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("lastActive")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("passwordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Voucher_System.Models.CustomerVoucher", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int");

                    b.Property<Guid?>("VoucherId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CustomerId", "VoucherId");

                    b.HasIndex("VoucherId1");

                    b.ToTable("CustomerVoucher");
                });

            modelBuilder.Entity("Voucher_System.Models.Merchent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("lastActive")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("passwordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("passwordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("userName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Merchents");
                });

            modelBuilder.Entity("Voucher_System.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BalanceUsd")
                        .HasColumnType("float")
                        .HasColumnName("balance_usd");

                    b.Property<int?>("BouquetId")
                        .HasColumnType("int")
                        .HasColumnName("bouquet_id");

                    b.Property<double>("CommissionValue")
                        .HasColumnType("float")
                        .HasColumnName("commission_value");

                    b.Property<double>("CommissionValueUSD")
                        .HasColumnType("float")
                        .HasColumnName("commission_value_USD");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_date");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<double>("Credit")
                        .HasColumnType("float")
                        .HasColumnName("credit");

                    b.Property<double>("CreditUsd")
                        .HasColumnType("float")
                        .HasColumnName("credit_usd");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("currency");

                    b.Property<double>("Debit")
                        .HasColumnType("float")
                        .HasColumnName("debit");

                    b.Property<double>("DebitUsd")
                        .HasColumnType("float")
                        .HasColumnName("debit_usd");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float")
                        .HasColumnName("exchange_rate");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notes");

                    b.Property<double>("ProductSellPrice")
                        .HasColumnType("float")
                        .HasColumnName("product_sell_price");

                    b.Property<double>("ProductSellPriceUSD")
                        .HasColumnType("float")
                        .HasColumnName("product_sell_price_usd");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("transaction_type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("Voucher_System.Models.TransactionExtended", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("prod_id");

                    b.HasKey("TransactionId");

                    b.ToTable("transaction_extended");
                });

            modelBuilder.Entity("Voucher_System.Models.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MerchentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NoOfUsage")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoucherCategory")
                        .HasColumnType("int");

                    b.Property<int>("VoucherType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MerchentId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Voucher_System.Models.CustomerVoucher", b =>
                {
                    b.HasOne("Voucher_System.Models.Customer", "Customer")
                        .WithMany("CustomerVouchers")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Voucher_System.Models.Voucher", "Voucher")
                        .WithMany("CustomerVouchers")
                        .HasForeignKey("VoucherId1");

                    b.Navigation("Customer");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Voucher_System.Models.TransactionExtended", b =>
                {
                    b.HasOne("Voucher_System.Models.Transaction", "Transaction")
                        .WithOne("TransactionExtended")
                        .HasForeignKey("Voucher_System.Models.TransactionExtended", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Voucher_System.Models.Voucher", b =>
                {
                    b.HasOne("Voucher_System.Models.Merchent", "Merchent")
                        .WithMany("Vouchers")
                        .HasForeignKey("MerchentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Merchent");
                });

            modelBuilder.Entity("Voucher_System.Models.Customer", b =>
                {
                    b.Navigation("CustomerVouchers");
                });

            modelBuilder.Entity("Voucher_System.Models.Merchent", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("Voucher_System.Models.Transaction", b =>
                {
                    b.Navigation("TransactionExtended");
                });

            modelBuilder.Entity("Voucher_System.Models.Voucher", b =>
                {
                    b.Navigation("CustomerVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
